package com.library.app.common.repository;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.library.app.category.model.Category;

public abstract class GenericRepository<T> {

	protected abstract Class<T> getPersistentClass();

	protected abstract EntityManager getEntityManager();

	public T add(final T entity) {
		getEntityManager().persist(entity);
		return entity;
	}

	public T findById(final Long id) {
		if (id == null) {
			return null;
		}
		return getEntityManager().find(getPersistentClass(), id);
	}

	public void update(final T entity) {
		getEntityManager().merge(entity);
	}
	
	@SuppressWarnings("unchecked")
	public List<T> findAll(String orderField) {

		return getEntityManager().createQuery("SELECT e FROM " + getPersistentClass() + " e ORDER BY e." + orderField).getResultList();
	}

	public boolean alreadyExists(String propertyName, String propertyValue, Long id ) {
		final StringBuilder jpql = new StringBuilder();
		jpql.append("SELECT 1 FROM " + getPersistentClass().getSimpleName() + " e WHERE e." + propertyName + 
				" = :propertyValue");
		if (id != null) {
			jpql.append(" And e.id != :id");
		}
		final Query query = getEntityManager().createQuery(jpql.toString());
		query.setParameter("propertyValue", propertyValue);
		if (id != null) {
			query.setParameter("id",  id);
		}
		return query.setMaxResults(1).getResultList().size() > 0;
	}

	public boolean existsById(final Long id) {
		return getEntityManager().createQuery("SELECT 1 From " +  getPersistentClass() + " e WHERE e.id = :id")
				.setParameter("id", id)
				.setMaxResults(1)
				.getResultList().size()>0;
	}
}
