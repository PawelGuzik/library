package com.library.app.common.repository;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.library.app.category.model.Category;
import com.library.app.common.model.PaginatedData;
import com.library.app.common.model.filter.PaginationData;

public abstract class GenericRepository<T> {

	protected abstract Class<T> getPersistentClass();

	protected abstract EntityManager getEntityManager();

	public T add(final T entity) {
		getEntityManager().persist(entity);
		return entity;
	}

	public T findById(final Long id) {
		if (id == null) {
			return null;
		}
		return getEntityManager().find(getPersistentClass(), id);
	}

	public void update(final T entity) {
		getEntityManager().merge(entity);
	}
	
	@SuppressWarnings("unchecked")
	public List<T> findAll(String orderField) {

		return getEntityManager().createQuery("SELECT e FROM " + getPersistentClass().getSimpleName() + " e ORDER BY e." + orderField).getResultList();
	}

	public boolean alreadyExists(String propertyName, String propertyValue, Long id ) {
		final StringBuilder jpql = new StringBuilder();
		jpql.append("SELECT 1 FROM " + getPersistentClass().getSimpleName() + " e WHERE e." + propertyName + 
				" = :propertyValue");
		if (id != null) {
			jpql.append(" And e.id != :id");
		}
		final Query query = getEntityManager().createQuery(jpql.toString());
		query.setParameter("propertyValue", propertyValue);
		if (id != null) {
			query.setParameter("id",  id);
		}
		return query.setMaxResults(1).getResultList().size() > 0;
	}

	public boolean existsById(final Long id) {
		return getEntityManager().createQuery("SELECT 1 From " +  getPersistentClass().getSimpleName() + " e WHERE e.id = :id")
				.setParameter("id", id)
				.setMaxResults(1)
				.getResultList().size()>0;
	}
	
	protected PaginatedData<T> findByParameters(String clause, PaginationData paginationData, Map<String, Object> queryParameters, String defaultSortFieldWithDirection){
		String clauseSort = "Order by e." + getSortField(paginationData, defaultSortFieldWithDirection);
		Query queryEntities = getEntityManager().createQuery("SELECT e FROM" + getPersistentClass().getSimpleName() 
				+ " e" + clause + " " + clauseSort);
		applyQueryParameters(queryParameters, queryEntities);
		applyPaginationOnQuery(paginationData, queryEntities);
		
		@SuppressWarnings("unchecked")
		List<T> entities = queryEntities.getResultList();
		
		return new PaginatedData<T>(countWithFilter(clause, queryParameters), entities);
	
	}
	
	private int countWithFilter(String clause, Map<String, Object> queryParameters) {
		Query queryCount = getEntityManager().createQuery("SELECT count (e) FROM " + getPersistentClass().getSimpleName() + " e "+ clause);
		applyQueryParameters(queryParameters, queryCount);
		return ((Long) queryCount.getSingleResult()).intValue();
	}
	
	private void applyPaginationOnQuery(PaginationData paginationData, Query query) {
		if(paginationData != null) {
			query.setFirstResult(paginationData.getFirstResult());
			query.setMaxResults(paginationData.getMaxResults());
		}
	}
	
	private String getSortField(PaginationData paginationData, String defaultSortField) {
		if(paginationData == null || paginationData.getOrderField() == null) {
			return defaultSortField;
		}
		return paginationData.getOrderField() + " " + getSortDirection(paginationData);
	}
	
	private String getSortDirection(PaginationData paginationData) {
		return paginationData.isAscending() ? "ASC" : "DESC";
	}
	
	private void applyQueryParameters(final Map<String, Object> queryParameters, final Query query) {
		for(final Entry<String, Object> entryMap : queryParameters.entrySet()) {
			query.setParameter(entryMap.getKey(), entryMap.getValue());
		}
	}
}
